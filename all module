`timescale 1ns / 1ps
module CPU(
    input clk,
    input reset,
    output [3:0] pc_out,
    output [7:0] instruction_out,
    output [7:0] alu_result_out,
    output [7:0] R0_out,
    output [7:0] R1_out,
    output [7:0] R2_out,
    output [7:0] R3_out
);
	 wire [3:0] pc;
    wire [7:0] instruction;
    wire [1:0] opcode;       
    wire [1:0] rs, rt, rd;    
    wire [5:0] jump_addr;     
    wire [3:0] immediate;           
    wire j_format, i_format, r_format, b_format;
    wire [7:0] read_data1, read_data2, read_data3;
	 wire [7:0] alu_result;
    wire zero_flag;
    wire reg_write, alu_select, jump, branch;
    wire [7:0] alu_input_b;
    wire [7:0] immediate_ext;
    wire [1:0] write_reg_mux;
  
     assign immediate_ext = {4'b0000, immediate};
    assign pc_out = pc;
    assign instruction_out = instruction;
    assign alu_result_out = alu_result;
	 
	  Program_Counter pc_module(
        .clk(clk),
        .reset(reset),
        .jump_addr(jump_addr),
        .Jump(jump),
        .Branch(branch),
        .Flag(zero_flag),
        .PC(pc)
    );
	 
	  Instruction_memory imem(
        .Address(pc),
        .Instruction(instruction)
    );
	 
	  Decode decoder(
        .Instruction(instruction),
        .opcode(opcode),
        .rs(rs),
        .rt(rt),
        .rd(rd),
        .jump_addr(jump_addr),
        .immediate(immediate),
        .j_format(j_format),
        .i_format(i_format),
        .r_format(r_format),
        .b_format(b_format)
    );
	 
	  Control_Unit control(
        .opcode(opcode),
        .i_format(i_format),
        .r_format(r_format),
        .j_format(j_format),
        .b_format(b_format),
        .RegWrite(reg_write),
        .ALUSrc(alu_select),
        .Jump(jump),
        .Branch(branch)
    );
	 
	  Reg_File regfile(
        .clk(clk),
        .reset(reset),
        .ReadReg1(rs),
        .ReadReg2(rt),         
        .WriteReg(write_reg_mux),         
        .WriteData(alu_result),
        .RegWrite(reg_write),
        .ReadData1(read_data1),
        .ReadData2(read_data2),
        .R0_out(R0_out),
        .R1_out(R1_out),
        .R2_out(R2_out),
        .R3_out(R3_out)
    );
	 
	 ALU_Select alu_mux (
        .alu_select(alu_select),
        .read_data2(read_data2),
        .immediate_ext(immediate_ext),
        .alu_input_b(alu_input_b)
    );
    
    ALU alu(
        .opcode(opcode),
        .A(read_data1),
        .B(alu_input_b),
        .Result(alu_result),
        .Flag(zero_flag)
    );
WriteReg_MUX wreg_mux(
  .r_format(r_format),
  .i_format(i_format),
  .rd(rd),
  .rs(rs),
  .write_reg(write_reg_mux)
 );
    
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps
module Program_Counter(
    input clk,
    input reset,
    input [5:0] jump_addr,    // Changed to 6-bit
    input Jump,
    input Branch,
    input Flag,
    output reg [3:0] PC
);
 always @(posedge clk or posedge reset) begin
        if (reset) begin
            PC <= 4'b0;
        end
    else if (Jump) begin
            PC <= jump_addr[3:0];  // Use only lowest 4 bits for 4-bit PC
        end
        else if (Branch && Flag) begin
            PC <= jump_addr[3:0];  // Branch if Zero flag is set
        end
        else begin
            PC <= PC + 1;  // Normal sequential execution
        end
    end
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps
module Instruction_memory(
    input [3:0] Address,
    output reg [7:0] Instruction
);
    reg [7:0] memory [0:15];  
    integer i;
    
     initial begin
        for (i = 0; i < 16; i = i + 1) begin
            memory[i] = 8'b00_00_00_00;  
        end
        
        memory[0] = 8'b01_00_1010;  // ADDIM R0, 10 
        memory[1] = 8'b01_01_0000;  // ADDIM R1, 0
        memory[2] = 8'b01_10_0000;  // ADDIM R1, 0
		  memory[3] = 8'b10_0_1_0111;  // BEQ R1,R0,7 
        memory[4] = 8'b00_01_10_10; //ADD R2, R2, R1 (R1+R2=R2)
        memory[5] = 8'b01_01_0001; //ADDI R1 + 1 = R1
        memory[6] = 8'b11_000011;    // JUMP to address 3
        memory[7] = 8'b11_000111;  // JUMP to address 7
        
    end
	 always @(Address) begin
        Instruction = memory[Address];
    end
     
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps
module Decode(
    input [7:0] Instruction,
    output [1:0] opcode,
    output [1:0] rs,
    output [1:0] rt,
    output [1:0] rd,
    output [3:0] immediate,
    output [5:0] jump_addr,
    output j_format,
    output i_format,
    output r_format,
    output b_format
);
  
    // Extract 2-bit opcode (first 2 bits)
     assign opcode = Instruction[7:6];
    
    assign rs = b_format ? {1'b0, Instruction[4]} : Instruction[5:4];
    assign rt = b_format ? {1'b0, Instruction[5]} : Instruction[3:2];
    assign rd = Instruction[1:0];
	 
	 // I-Format
    assign immediate = Instruction[3:0];
    
    // J-Format
    assign jump_addr = Instruction[5:0];
    

    assign r_format = (opcode == 2'b00);
    assign i_format = (opcode == 2'b01);
    assign b_format = (opcode == 2'b10);
    assign j_format = (opcode == 2'b11);
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps

module Control_Unit(
    input [1:0] opcode,
    input i_format,
    input r_format,
    input j_format,
    input b_format,
    output reg RegWrite,
    output reg ALUSrc,
    output reg Jump,
    output reg Branch
);
	 
	 always @(*) begin
        RegWrite = 1'b0;
        ALUSrc = 1'b0;
        Jump = 1'b0;
        Branch = 1'b0;
        
        case(opcode)
            2'b00: begin  // ADD (R-Format)
                RegWrite = 1'b1;
                ALUSrc = 1'b0;    // Use register value
            end
            2'b01: begin  // ADDIM (I-Format)
                RegWrite = 1'b1;
                ALUSrc = 1'b1;    // Use immediate value
				end
            2'b10: begin  // BEQ (B-Format)
                RegWrite = 1'b0;
                ALUSrc = 1'b0;   
                Branch = 1'b1;    
            end
            2'b11: begin  // JUMP (J-Format)
                RegWrite = 1'b0;
                Jump = 1'b1;      // Enable jump
            end     
        endcase
    end
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps
module Reg_File(
   input clk,
    input reset,
    input [1:0] ReadReg1,    // rs
    input [1:0] ReadReg2,    // rt 
    input [1:0] WriteReg,    // rd 
    input [7:0] WriteData,
    input RegWrite, // 1 = write enable
    output [7:0] ReadData1,
    output [7:0] ReadData2,
    output [7:0] R0_out,
    output [7:0] R1_out,
    output [7:0] R2_out,
    output [7:0] R3_out
);
	 
	   reg [7:0] registers [0:3];
  assign R0_out = registers[0];
    assign R1_out = registers[1];
    assign R2_out = registers[2];
    assign R3_out = registers[3];
  
  assign ReadData1 = registers[ReadReg1];  // rs
    assign ReadData2 = registers[ReadReg2];  // rt 
 
 always @(posedge clk or posedge reset) begin
        if (reset) begin
     
            registers[0] <= 8'b0;
            registers[1] <= 8'b0;
            registers[2] <= 8'b0;
            registers[3] <= 8'b0;
        end
		  
		  
		   else if (RegWrite) begin
            registers[WriteReg] <= WriteData;
        end
    end
endmodule
	
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps

module ALU_Select(
    input wire alu_select,
    input wire [7:0] read_data2,
    input wire [7:0] immediate_ext,
    output wire [7:0] alu_input_b
);
    assign alu_input_b = alu_select ? immediate_ext : read_data2;
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps
module ALU(
    input [1:0] opcode,
    input [7:0] A,
    input [7:0] B,
    output reg [7:0] Result,
    output reg Flag
);
always @(*) begin
        case(opcode)
            2'b00: begin // ADD 
                Result = A + B;
            end
            2'b01: begin // ADDIM 
                Result = A + B;
            end
				2'b10: begin // BEQ
                Result = (A == B) ? 8'b1 : 8'b0;
                Flag = (A == B) ? 1'b1 : 1'b0;
            end
				 2'b11: begin // JUMP
                Result = A;
            end
            default: begin
                Result = 8'b0;
                Flag = 1'b1;
            end
    endcase
    end
endmodule

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

`timescale 1ns / 1ps

module WriteReg_MUX(
    input r_format,
    input i_format,
    input [1:0] rd,
    input [1:0] rs,
    output [1:0] write_reg
);
 assign write_reg = r_format ? rd :    // R-format: write rd
                       i_format ? rs :     // I-format: write rs
                       2'b00;              // (J/B-format): not write
endmodule
